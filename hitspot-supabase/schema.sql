-- Create a table for public users
create table users (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  birthday timestamp with time zone,
  created_at timestamp with time zone,
  username text unique,
  name text,
  avatar_url text,
  is_email_verified boolean,
  is_profile_completed boolean,
  email text,
  is_email_hidden boolean,
  biogram text,
--   COUNTS
  followers_count bigint default 0 not null,
  following_count bigint default 0 not null,
  spots_count bigint default 0 not null,
  boards_count bigint default 0 not null,
  constraint username_length check (char_length(username) >= 3)
);

CREATE TABLE follows (
	id bigint generated by default as identity primary key,
    follower_id UUID references public.users not null,
    followed_id UUID references public.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table users
  enable row level security;

create policy "Public users are viewable by everyone." on users
  for select using (true);

create policy "Users can insert their own profile." on users
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on users
  for update using ((select auth.uid()) = id);

-- SPOTS
create table spots (
	id bigint generated by default as identity primary key,
	created_by uuid references public.users not null,
	title text check (char_length(description) <= 128) not null,
	description text check (char_length(description) <= 512) not null,
	images json,
	thumbnails json,
	geohash text not null,
	location text not null, -- CHANGE TO POINT WITH EXTENSIONS
	created_at timestamp with time zone default timezone('utc'::text, now()) not null,
	-- COUNTS
	likes_count bigint default 0 not null,
	comments_count bigint default 0 not null,
	saves_count bigint default 0 not null,
	boards_count bigint default 0 not null,
	trips_count bigint default 0 not null,
	shares_count bigint default 0 not null
);


CREATE TABLE spots_shares (
    id bigint generated by default as identity primary key,
    spot_id bigint references public.spots not null,
    from_id UUID references public.users not null,
    to_id UUID references public.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

CREATE TABLE "spots_likes" (
	id bigint generated by default as identity primary key,
    spot_id bigint references public.spots not null,
    created_by UUID references public.users not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

CREATE TABLE "spots_comments" (
    id bigint generated by default as identity primary key,
    spot_id bigint references public.spots not null,
    created_by UUID references public.users not null,
    content text check (char_length(content) <= 256) not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

CREATE TABLE "spots_saves" (
	id bigint generated by default as identity primary key,
    spot_id bigint references public.spots not null,
    saved_by_id UUID references public.users not null,
    saved_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- BOARDS
CREATE TABLE boards (
    id bigint generated by default as identity primary key,
    created_by UUID references public.users not null,
    color text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    visibility visibility not null,
    description text check (char_length(description) <= 512) not null,
    image text,
    title text check (char_length(title) <= 128) not null
);

CREATE TABLE "boards_spots" (
    id bigint generated by default as identity primary key,
    board_id bigint references public.boards not null,
    spot_id bigint references public.spots not null,
    added_at timestamp with time zone default timezone('utc'::text, now()) not null,
    added_by UUID references public.users not null
);

CREATE TABLE "boards_permissions" (
    id bigint generated by default as identity primary key,
    user_id UUID references public.users not null,
    board_id bigint references public.boards not null,
    permission_level permission_level not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- TRIPS
create table trips (
	id bigint generated by default as identity primary key,
	created_by uuid references public.users not null,
	title text check (char_length(title) <= 128) not null, 
	description text check (char_length(description) <= 512) not null, 
	trip_date timestamp with time zone,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null,
	visibility visibility not null,
	forked_from bigint references public.boards,
	trip_budget json
);

CREATE TABLE "trips_permissions" (
    id bigint generated by default as identity primary key,
    user_id uuid references public.users not null,
    trip_id bigint references public.trips not null,
    permission_type BIGINT NOT NULL,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

CREATE TABLE "trips_spots" (
    id bigint generated by default as identity primary key,
    spot_id bigint references public.spots not null,
    trip_id bigint references public.trips not null,
    added_by uuid references public.users not null,
    number_in_order bigint default 0 not null
);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.register_user()
returns trigger as $$
begin
  insert into public.users (id, email)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;
create trigger on_user_registered
  after insert on auth.users
  for each row execute procedure public.register_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

  -- Add indices for better performance on foreign key columns
CREATE INDEX idx_spot_shares_spot_id ON "spots_shares" ("spot_id");
CREATE INDEX idx_spot_shares_from_id ON "spots_shares" ("from_id");
CREATE INDEX idx_spot_shares_to_id ON "spots_shares" ("to_id");

CREATE INDEX idx_trips_created_by ON "trips" ("created_by");
CREATE INDEX idx_trips_forked_from ON "trips" ("forked_from");

CREATE INDEX idx_spots_created_by ON "spots" ("created_by");

CREATE INDEX idx_boards_created_by ON "boards" ("created_by");

CREATE INDEX idx_follows_follower_id ON "follows" ("follower_id");
CREATE INDEX idx_follows_followed_id ON "follows" ("followed_id");

CREATE INDEX idx_boards_spots_board_id ON "boards_spots" ("board_id");
CREATE INDEX idx_boards_spots_spot_id ON "boards_spots" ("spot_id");

CREATE INDEX idx_boards_permissions_user_id ON "boards_permissions" ("user_id");
CREATE INDEX idx_boards_permissions_board_id ON "boards_permissions" ("board_id");

CREATE INDEX idx_trips_permissions_user_id ON "trips_permissions" ("user_id");
CREATE INDEX idx_trips_permissions_trip_id ON "trips_permissions" ("trip_id");

CREATE INDEX idx_spots_likes_spot_id ON "spots_likes" ("spot_id");
CREATE INDEX idx_spots_likes_created_by ON "spots_likes" ("created_by");

CREATE INDEX idx_spots_comments_spot_id ON "spots_comments" ("spot_id");
CREATE INDEX idx_spots_comments_created_by ON "spots_comments" ("created_by");

CREATE INDEX idx_trips_spots_trip_id ON "trips_spots" ("trip_id");
CREATE INDEX idx_trips_spots_spot_id ON "trips_spots" ("spot_id");

CREATE INDEX idx_spots_saves_spot_id ON "spots_saves" ("spot_id");
CREATE INDEX idx_spots_saves_saved_by_id ON "spots_saves" ("saved_by_id");
